# .cursorrules

# ðŸ‘‡ Ù‚ÙˆØ§Ø¹Ø¯ Ø¹Ø§Ù…Ø©
Always write clean and readable JavaScript.
Do not use TypeScript.
Use functional components and arrow functions.
Avoid unnecessary dependencies or abstraction.
Comment complex logic clearly.

# ðŸ‘‡ Next.js Ù…Ø­Ø¯Ø¯Ø§Øª
Use Next.js file structure and routing best practices.
Use dynamic imports for heavy components.
Use built-in Next.js Image for image optimization.
Avoid direct access to window/document unless in useEffect.

# ðŸ‘‡ Ø§Ù„ØªØ±Ø¬Ù…Ø© Ø¨Ø§Ø³ØªØ®Ø¯Ø§Ù… next-intl
Always use `useTranslations()` from next-intl for any text visible to the user.
Never hardcode UI text strings; always use translation keys like t('home.title').
If missing a key, fallback gracefully and mention it in comments.

# ðŸ‘‡ Tailwind CSS
Use Tailwind CSS classes for all styling.
Prefer utility-first styling over custom CSS.
Use consistent spacing, padding, and rounded classes.
Avoid inline `style={}` when Tailwind utility can be used instead.
Group Tailwind classes by layout > spacing > color > interaction.

# ðŸ‘‡ ØªØ­Ø³ÙŠÙ†Ø§Øª ÙˆØ§Ø¬Ù‡Ø© Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…
Prioritize accessibility (a11y): use semantic HTML and `aria` attributes.
Add hover and focus states to buttons/links.
Use dark mode support via Tailwindâ€™s dark: modifier.

# ðŸ‘‡ Ø£Ø®Ø±Ù‰
Split components if they exceed 100 lines.
Use meaningful file and variable names.
Ensure responsive design using Tailwind's responsive classes.
